from typing import List


def numIslands(grid: List[List[str]]) -> int:
    
    search_queue = []
    found_island = False

    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == '1':
                search_queue.append((i, j))
                found_island = True
                break

        if found_island:
            break
    
    if len(search_queue) == 0:
        return 0

    while len(search_queue) != 0:
        # check north south east and west
        curr_coord = search_queue.pop(0)
        x_coord = curr_coord[0]
        y_coord = curr_coord[1]


        grid[x_coord][y_coord] = ''

        # north
        if x_coord + 1 < len(grid) and grid[x_coord + 1][y_coord] == '1':
            grid[x_coord + 1][y_coord] = ''            
            search_queue.append((x_coord + 1, y_coord))

        # east
        if y_coord + 1 < len(grid[0]) and grid[x_coord][y_coord + 1] == '1':
            grid[x_coord][y_coord + 1] = ''
            search_queue.append(((x_coord, y_coord + 1)))

        # south
        if x_coord - 1 >= 0 and grid[x_coord - 1][y_coord] == '1':
            grid[x_coord - 1][y_coord] = ''
            search_queue.append(((x_coord - 1, y_coord)))

        # west
        if y_coord - 1 >= 0 and grid[x_coord][y_coord - 1] == '1':
            grid[x_coord][y_coord - 1] = ''
            search_queue.append(((x_coord, y_coord - 1)))

    return 1 + numIslands(grid)
    
if __name__ == '__main__':

    grid = [
        ["1", "1", "0", "0", "0"],
        ["0", "1", "0", "1", "0"],
        ["1", "1", "0", "0", "0"],
        ["0", "0", "1", "0", "0"],
    ]

    grid = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
            ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
            ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
            ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
            ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

    for rows in grid:
        print(rows)
    solution = numIslands(grid=grid)
    print(f"Number of islands: {solution}")

    